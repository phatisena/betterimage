<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="qj~vg(zFocg.~V|TPz]?" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="*({~Z|=_U/)uF-}.s@AM" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace images {" line1="" line2="    export enum imgsizes { width, height}" line3="" line4="    let mt4: Image[] = [img`" line5="        . . . ." line6="        . . . ." line7="        . . . ." line8="        . . . ." line9="    `," line10="    img`" line11="        . . . ." line12="        . . . ." line13="        . . f ." line14="        . . . ." line15="    `," line16="    img`" line17="        f . . ." line18="        . . . ." line19="        . . f ." line20="        . . . ." line21="    `," line22="        img`" line23="            f . f ." line24="            . . . ." line25="            f . f ." line26="            . . . ." line27="        `," line28="        img`" line29="            f . f ." line30="            . f . ." line31="            f . f ." line32="            . . . ." line33="        `," line34="        img`" line35="            f . f ." line36="            . f . ." line37="            f . f ." line38="            . . . f" line39="        `," line40="        img`" line41="            f . f ." line42="            . f . f" line43="            f . f ." line44="            . f . f" line45="        `," line46="        img`" line47="            f . f ." line48="            f f . f" line49="            f . f ." line50="            f f f f" line51="        `," line52="        img`" line53="            f . f ." line54="            f f . f" line55="            f . f ." line56="            . f f f" line57="        `," line58="        img`" line59="            f . f ." line60="            f f f f" line61="            f . f ." line62="            f f f f" line63="        `," line64="        img`" line65="            f f f ." line66="            f f f f" line67="            f . f f" line68="            f f f f" line69="        `," line70="        img`" line71="            f f f f" line72="            f f f f" line73="            f . f f" line74="            f f f f" line75="        `," line76="        img`" line77="            f f f f" line78="            f f f f" line79="            f f f f" line80="            f f f f" line81="        `]" line82="" line83="    //%blockid=img_stampimage" line84="    //%block=&quot;stamp $src=screen_image_picker to $to=screen_image_picker at X: $x Y: $y&quot;" line85="    //%group=&quot;image oparetor&quot;" line86="    //%inlineInputMode=inline" line87="    //%weight=10" line88="    export function stampImage(src: Image, to: Image, x: number, y: number) {" line89="        if (!src || !to) { return; }" line90="        to.drawTransparentImage(src, x, y);" line91="    }" line92="" line93="    //%blockid=img_squareimage" line94="    //%block=&quot;$uimg=screen_image_picker as square&quot;" line95="    //%group=&quot;image oparetor&quot;" line96="    //%inlineInputMode=inline" line97="    //%weight=9" line98="    export function squareImage(uimg:Image) {" line99="        let imax = Math.max(uimg.width,uimg.height), uuimg = image.create(imax,imax)" line100="        stampImage(uimg, uuimg, Math.floor((imax / 2) - (uimg.width / 2)), Math.floor((imax / 2) - (uimg.height / 2)))" line101="        uimg = uuimg.clone()" line102="    }" line103="" line104="    /**" line105="     * calculated size" line106="     * from image" line107="     */" line108="    //%blockid=img_imgsizes" line109="    //%block=&quot;$img=screen_image_picker $imgsize&quot;" line110="    //%group=&quot;image oparetor&quot;" line111="    //%inlineInputMode=inline" line112="    //%weight=8" line113="    export function ImgSize(img: Image, imgsize: imgsizes) {" line114="        switch (imgsize) {" line115="            case imgsizes.width:" line116="                return img.width;" line117="            case imgsizes.height:" line118="                return img.height;" line119="            default:" line120="                return 0;" line121="" line122="        }" line123="    }" line124="" line125="    /**" line126="     * advance image color replace" line127="     * and get return image in another colors" line128="     * from color input list" line129="     */" line130="    //%blockid=img_recol" line131="    //%block=&quot;$img=screen_image_picker re stamp from $lacol to $lbcol&quot;" line132="    //%lacol.shadow=&quot;lists_create_with&quot; lacol.defl=&quot;colorindexpicker&quot;" line133="    //%lbcol.shadow=&quot;lists_create_with&quot; lbcol.defl=&quot;colorindexpicker&quot;" line134="    //%group=&quot;image manager&quot;" line135="    //%inlineInputMode=inline" line136="    //%weight=10" line137="    export function ReColor(img: Image, lacol: number[], lbcol: number[]) {" line138="        let colnv = 0, oimg = image.create(img.width, img.height)" line139="        for (let imx = 0; imx &lt; img.width; imx++) {" line140="            for (let imy = 0; imy &lt; img.height; imy++) {" line141="                const ucol = img.getPixel(imx, imy), coli = lacol.indexOf(ucol)" line142="                if ( coli &gt;= 0) { colnv = lacol[coli] } else { colnv = ucol}" line143="                if (ucol &gt;= 0) {" line144="                    if (coli &gt;= 0) {" line145="                        oimg.setPixel(imx, imy, lbcol[coli])" line146="                    } else {" line147="                        oimg.setPixel(imx, imy, ucol)" line148="                    }" line149="                }" line150="            }" line151="        }" line152="        img = oimg" line153="    }" line154="" line155="    /**" line156="     * advance image color replace" line157="     * and get return image" line158="     * in another colors" line159="     * as matrix shader" line160="     * from color input list" line161="     */" line162="    //%blockid=img_recolshade" line163="    //%block=&quot;$img=screen_image_picker matrix shader $mtl from $lacol to $lbcol&quot;" line164="    //%lacol.shadow=&quot;lists_create_with&quot; lacol.defl=&quot;colorindexpicker&quot;" line165="    //%lbcol.shadow=&quot;lists_create_with&quot; lbcol.defl=&quot;colorindexpicker&quot;" line166="    //%mtl.min=0 mtl.max=12 mtl.defl=0" line167="    //%group=&quot;image manager&quot;" line168="    //%inlineInputMode=inline" line169="    //%weight=9" line170="    export function ReColorShade(img: Image, mtl: number = 0, lacol: number[], lbcol: number[]) {" line171="        let colnv2 = 0, oimg2 = image.create(img.width, img.height)" line172="        let mt4l = mt4.length, mti = mtl % mt4l" line173="        for (let imx2 = 0; imx2 &lt; img.width; imx2++) {" line174="            for (let imy2 = 0; imy2 &lt; img.height; imy2++) {" line175="                const rix = imx2 % mt4[mti].width, riy = imy2 % mt4[mti].height" line176="                const ucol2 = img.getPixel(imx2, imy2), coli2 = lacol.indexOf(ucol2)" line177="                if (coli2 &gt;= 0) { colnv2 = lacol[coli2] } else { colnv2 = ucol2 }" line178="                if (ucol2 &gt;= 0) {" line179="                    if (coli2 &gt;= 0) {" line180="                        if (mt4[mti].getPixel(rix, riy) &gt; 0){" line181="                            oimg2.setPixel(imx2, imy2, lbcol[coli2])" line182="                        } else {" line183="                            oimg2.setPixel(imx2, imy2, lacol[coli2])" line184="                        }" line185="                    } else {" line186="                        if (mt4[mti].getPixel(rix, riy) &gt; 0) {" line187="                            oimg2.setPixel(imx2, imy2, ucol2)" line188="                        }" line189="                    }" line190="                }" line191="            }" line192="        }" line193="        img = oimg2" line194="    }" line195="" line196="    /**" line197="     * advance image color" line198="     * fill matrix shader" line199="     * to image" line200="     */" line201="    //%blockid=img_reshade" line202="    //%block=&quot;$img=screen_image_picker fill matrix shader $mtl from $icol to $ocol&quot;" line203="    //%icol.shadow=&quot;colorindexpicker&quot;" line204="    //%ocol.shadow=&quot;colorindexpicker&quot;" line205="    //%mtl.min=0 mtl.max=12 mtl.defl=0" line206="    //%group=&quot;image manager&quot;" line207="    //%inlineInputMode=inline" line208="    //%weight=8" line209="    export function ReShade(img: Image, mtl: number = 0, icol: number = 0, ocol: number = 0) {" line210="        let colnv3 = 0, coli3 = 0" line211="        let oimg3 = image.create(img.width, img.height)" line212="        let mt4l2 = mt4.length, mti2 = mtl % mt4l2" line213="        for (let imx3 = 0; imx3 &lt; img.width; imx3++) {" line214="            for (let imy3 = 0; imy3 &lt; img.height; imy3++) {" line215="                const rix2 = imx3 % mt4[mti2].width, riy2 = imy3 % mt4[mti2].height, ucol3 = img.getPixel(imx3, imy3)" line216="                if (icol &gt; 0) {" line217="                    if (icol == ucol3) {" line218="                        if (mt4[mti2].getPixel(rix2, riy2) &gt; 0) {" line219="                            oimg3.setPixel(imx3, imy3, ocol)" line220="                        } else {" line221="                            oimg3.setPixel(imx3, imy3, ucol3)" line222="                        }" line223="                    }" line224="                } else {" line225="                    if (mt4[mti2].getPixel(rix2, riy2) &gt; 0) {" line226="                        oimg3.setPixel(imx3, imy3, ocol)" line227="                    } else {" line228="                        oimg3.setPixel(imx3, imy3, ucol3)" line229="                    }" line230="                }" line231="            }" line232="        }" line233="        return oimg3" line234="    }" line235="" line236="    //%blockid=img_drawandcrop" line237="    //%block=&quot;stamp $img0=screen_image_picker to $img1=screen_image_picker and cutting color with $colorCut at x $xw y $yh&quot;" line238="    //%colorCut.shadow=&quot;lists_create_with&quot; colorCut.defl=colorindexpicker" line239="    //%group=&quot;image manager&quot;" line240="    //%inlineInputMode=inline" line241="    //%weight=7" line242="    export function StampCutter(img0:Image,img1:Image,colorCut:number[],xw:number,yh:number) {" line243="        if (!img0 || !img1) return;" line244="        for (let x = 0;x &lt; img0.width;x++) {" line245="            for (let y = 0;y &lt; img0.height;y++) {" line246="                const tcolor = img0.getPixel(x,y), fcolor = img1.getPixel(xw+x,yh+y)" line247="                if (tcolor &gt; 0) {" line248="                    if (colorCut.indexOf(fcolor) &gt;= 0) {" line249="                        img1.setPixel(xw+x,yh+y,fcolor)" line250="                    }" line251="                }" line252="            }" line253="        }" line254="    }" line255="" line256="    /**" line257="     * advance image overalap" line258="     * the another image" line259="     * with scanning image" line260="     * to checking overlap the image" line261="     */" line262="    //%blockid=img_imgoverlap" line263="    //%block=&quot;image $ImgI=screen_image_picker overlap otherimage $ImgO=screen_image_picker At OffsetX $Ix OffsetY $Iy And DirX $Dx DirY $Dy&quot;" line264="    //%Dx.min=-1 Dx.max=1 Dx.defl=0" line265="    //%Dy.min=-1 Dy.max=1 Dy.defl=0" line266="    //%group=&quot;image overalap otherimage&quot;" line267="    //%inlineInputMode=inline" line268="    //%weight=0" line269="    export function ImgOverlapImg(ImgI: Image, ImgO: Image, Ix: number, Iy: number, Dx: number, Dy: number) {" line270="        if (ImgI.width &gt; ImgO.height || ImgI.width &gt; ImgO.height) { return false }" line271="        if (Dy == 0 &amp;&amp; Math.abs(Dx) &gt; 0) {" line272="            if (Dx &gt; 0) {" line273="                for (let Nx = 0; Nx &lt; ImgI.width; Nx++) {" line274="                    for (let Ny = 0; Ny &lt; ImgI.height; Ny++) {" line275="                        if (ImgI.getPixel(Nx, Ny) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx, Iy + Ny) &gt; 0) {" line276="                            return true" line277="                        }" line278="                    }" line279="                }" line280="            } else if (Dx &lt; 0) {" line281="                for (let Nx2 = ImgI.width; Nx2 &gt;= 0; Nx2--) {" line282="                    for (let Ny2 = 0; Ny2 &lt; ImgI.height; Ny2++) {" line283="                        if (ImgI.getPixel(Nx2, Ny2) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx2, Iy + Ny2) &gt; 0) {" line284="                            return true" line285="                        }" line286="                    }" line287="                }" line288="            }" line289="        } else if (Dx == 0 &amp;&amp; Math.abs(Dy) &gt; 0) {" line290="            if (Dy &gt; 0) {" line291="                for (let Ny3 = 0; Ny3 &lt; ImgI.height; Ny3++) {" line292="                    for (let Nx3 = 0; Nx3 &lt; ImgI.width; Nx3++) {" line293="                        if (ImgI.getPixel(Nx3, Ny3) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx3, Iy + Ny3) &gt; 0) {" line294="                            return true" line295="                        }" line296="                    }" line297="                }" line298="            } else if (Dy &lt; 0) {" line299="                for (let Ny4 = ImgI.height; Ny4 &gt;= 0; Ny4--) {" line300="                    for (let Nx4 = 0; Nx4 &lt; ImgI.width; Nx4++) {" line301="                        if (ImgI.getPixel(Nx4, Ny4) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx4, Iy + Ny4) &gt; 0) {" line302="                            return true" line303="                        }" line304="                    }" line305="                }" line306="            }" line307="        }" line308="        return false" line309="    }" line310="    " line311="}" numlines="312"></mutation></block></statement></block></xml>