<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="A(1L5)ncstqhU=[BNi``" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="R,s#?k[q`fJlc8gH[|~/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace images {" line1="" line2="    export interface pos {" line3="        x: number" line4="        y: number" line5="    }" line6="    " line7="    export interface ftimg {" line8="        fimg: Image" line9="        timg: Image" line10="    }" line11="" line12="    export enum imgsizes { width, height}" line13="" line14="    export function calculatePercentage(value: number, maxValue: number, maxPercentage: number, floated: boolean = false): number {" line15="        if (value &gt; maxValue) {" line16="            console.error(`Value exceeds the maximum allowed. ${value} : ${maxValue}`);" line17="            return maxPercentage;" line18="        }" line19="        value = Math.min(value, maxValue)" line20="        let percentage = Math.floor((value / maxValue) * maxPercentage);" line21="        if (floated) {" line22="            percentage = (value / maxValue) * maxPercentage;" line23="        }" line24="        return Math.min(percentage, maxPercentage);" line25="    }" line26="" line27="    export function stampImg(src: Image, to: Image, x: number, y: number) {" line28="        if (!src || !to) { return; }" line29="        to.drawTransparentImage(src, x, y);" line30="    }" line31="" line32="    let mt4: Image[] = [img`" line33="        . . . ." line34="        . . . ." line35="        . . . ." line36="        . . . ." line37="    `," line38="    img`" line39="        . . . ." line40="        . . . ." line41="        . . f ." line42="        . . . ." line43="    `," line44="    img`" line45="        f . . ." line46="        . . . ." line47="        . . f ." line48="        . . . ." line49="    `," line50="        img`" line51="            f . f ." line52="            . . . ." line53="            f . f ." line54="            . . . ." line55="        `," line56="        img`" line57="            f . f ." line58="            . f . ." line59="            f . f ." line60="            . . . ." line61="        `," line62="        img`" line63="            f . f ." line64="            . f . ." line65="            f . f ." line66="            . . . f" line67="        `," line68="        img`" line69="            f . f ." line70="            . f . f" line71="            f . f ." line72="            . f . f" line73="        `," line74="        img`" line75="            f . f ." line76="            f f . f" line77="            f . f ." line78="            f f f f" line79="        `," line80="        img`" line81="            f . f ." line82="            f f . f" line83="            f . f ." line84="            . f f f" line85="        `," line86="        img`" line87="            f . f ." line88="            f f f f" line89="            f . f ." line90="            f f f f" line91="        `," line92="        img`" line93="            f f f ." line94="            f f f f" line95="            f . f f" line96="            f f f f" line97="        `," line98="        img`" line99="            f f f f" line100="            f f f f" line101="            f . f f" line102="            f f f f" line103="        `," line104="        img`" line105="            f f f f" line106="            f f f f" line107="            f f f f" line108="            f f f f" line109="        `]" line110="" line111="    //%blockid=img_stampimage" line112="    //%block=&quot;$duoimg at $point&quot;" line113="    //%duoimg.shadow=img_ftimgshadow" line114="    //%point.shadow=img_posshadow" line115="    //%group=&quot;image oparetor&quot;" line116="    //%inlineInputMode=inline" line117="    //%weight=20" line118="    export function stampImage(duoimg: ftimg, point: pos) {" line119="        if (!duoimg.fimg || !duoimg.timg) { return; }" line120="        duoimg.timg.drawTransparentImage(duoimg.fimg, point.x, point.y);" line121="    }" line122="" line123="    //%blockid=img_squareimage" line124="    //%block=&quot;$uimg=screen_image_picker as square&quot;" line125="    //%group=&quot;image oparetor&quot;" line126="    //%inlineInputMode=inline" line127="    //%weight=18" line128="    export function squareImage(uimg:Image) {" line129="        let imax = Math.max(uimg.width,uimg.height)" line130="        let uuimg = image.create(imax,imax)" line131="        stampImg(uimg, uuimg, Math.floor((imax / 2) - (uimg.width / 2)), Math.floor((imax / 2) - (uimg.height / 2)))" line132="        uimg = uuimg.clone()" line133="    }" line134="" line135="    /**" line136="     * calculated size" line137="     * from image" line138="     */" line139="    //%blockid=img_imgsizes" line140="    //%block=&quot;$img=screen_image_picker $imgsize&quot;" line141="    //%group=&quot;better image&quot;" line142="    //%inlineInputMode=inline" line143="    //%weight=60" line144="    export function ImgSize(img: Image, imgsize: imgsizes) {" line145="        switch (imgsize) {" line146="            case imgsizes.width:" line147="                return img.width;" line148="            case imgsizes.height:" line149="                return img.height;" line150="            default:" line151="                return 0;" line152="" line153="        }" line154="    }" line155="" line156="    /**" line157="     * advance image color replace" line158="     * and get return image in another colors" line159="     * from color input list" line160="     */" line161="    //%blockid=img_recol" line162="    //%block=&quot;$img=screen_image_picker re stamp from $lacol to $lbcol&quot;" line163="    //%lacol.shadow=&quot;lists_create_with&quot; lacol.defl=&quot;colorindexpicker&quot;" line164="    //%lbcol.shadow=&quot;lists_create_with&quot; lbcol.defl=&quot;colorindexpicker&quot;" line165="    //%group=&quot;better image&quot;" line166="    //%inlineInputMode=inline" line167="    //%weight=40" line168="    export function ReColor(img: Image, lacol: number[], lbcol: number[]) {" line169="        let colnv = 0" line170="        let coli = 0" line171="        let ucol = 0" line172="        let oimg = image.create(img.width, img.height)" line173="        for (let imx = 0; imx &lt; img.width; imx++) {" line174="            for (let imy = 0; imy &lt; img.height; imy++) {" line175="                ucol = img.getPixel(imx, imy)" line176="                coli = lacol.indexOf(ucol)" line177="                if ( coli &gt;= 0) { colnv = lacol[coli] } else { colnv = ucol}" line178="                if (ucol &gt;= 0) {" line179="                    if (coli &gt;= 0) {" line180="                        oimg.setPixel(imx, imy, lbcol[coli])" line181="                    } else {" line182="                        oimg.setPixel(imx, imy, ucol)" line183="                    }" line184="                }" line185="            }" line186="        }" line187="        return oimg" line188="    }" line189="" line190="    /**" line191="     * advance image color replace" line192="     * and get return image" line193="     * in another colors" line194="     * as matrix shader" line195="     * from color input list" line196="     */" line197="    //%blockid=img_recolshade" line198="    //%block=&quot;$img=screen_image_picker matrix shader $mtl from $lacol to $lbcol&quot;" line199="    //%lacol.shadow=&quot;lists_create_with&quot; lacol.defl=&quot;colorindexpicker&quot;" line200="    //%lbcol.shadow=&quot;lists_create_with&quot; lbcol.defl=&quot;colorindexpicker&quot;" line201="    //%mtl.min=0 mtl.max=8 mtl.defl=0" line202="    //%group=&quot;better image&quot;" line203="    //%inlineInputMode=inline" line204="    //%weight=20" line205="    export function ReColShade(img: Image, mtl: number = 0, lacol: number[], lbcol: number[]) {" line206="        let colnv2 = 0" line207="        let coli2 = 0" line208="        let ucol2 = 0" line209="        let oimg2 = image.create(img.width, img.height)" line210="        let rix = 0" line211="        let riy = 0" line212="        let mt4l = mt4.length" line213="        let mti = mtl % mt4l" line214="        for (let imx2 = 0; imx2 &lt; img.width; imx2++) {" line215="            for (let imy2 = 0; imy2 &lt; img.height; imy2++) {" line216="                rix = imx2 % mt4[mti].width" line217="                riy = imy2 % mt4[mti].height" line218="                ucol2 = img.getPixel(imx2, imy2)" line219="                coli2 = lacol.indexOf(ucol2)" line220="                if (coli2 &gt;= 0) { colnv2 = lacol[coli2] } else { colnv2 = ucol2 }" line221="                if (ucol2 &gt;= 0) {" line222="                    if (coli2 &gt;= 0) {" line223="                        if (mt4[mti].getPixel(rix, riy) &gt; 0){" line224="                            oimg2.setPixel(imx2, imy2, lbcol[coli2])" line225="                        } else {" line226="                            oimg2.setPixel(imx2, imy2, lacol[coli2])" line227="                        }" line228="                    } else {" line229="                        if (mt4[mti].getPixel(rix, riy) &gt; 0) {" line230="                            oimg2.setPixel(imx2, imy2, ucol2)" line231="                        }" line232="                    }" line233="                }" line234="            }" line235="        }" line236="        return oimg2" line237="    }" line238="" line239="    /**" line240="     * advance image color" line241="     * fill matrix shader" line242="     * to image" line243="     */" line244="    //%blockid=img_reshade" line245="    //%block=&quot;$img=screen_image_picker fill matrix shader $mtl from $icol to $ocol&quot;" line246="    //%icol.shadow=&quot;colorindexpicker&quot;" line247="    //%ocol.shadow=&quot;colorindexpicker&quot;" line248="    //%mtl.min=0 mtl.max=8 mtl.defl=0" line249="    //%group=&quot;better image&quot;" line250="    //%inlineInputMode=inline" line251="    //%weight=10" line252="    export function ReShade(img: Image, mtl: number = 0, icol: number = 0, ocol: number = 0) {" line253="        let colnv3 = 0" line254="        let coli3 = 0" line255="        let ucol3 = 0" line256="        let oimg3 = image.create(img.width, img.height)" line257="        let rix2 = 0" line258="        let riy2 = 0" line259="        let mt4l2 = mt4.length" line260="        let mti2 = mtl % mt4l2" line261="        for (let imx3 = 0; imx3 &lt; img.width; imx3++) {" line262="            for (let imy3 = 0; imy3 &lt; img.height; imy3++) {" line263="                rix2 = imx3 % mt4[mti2].width" line264="                riy2 = imy3 % mt4[mti2].height" line265="                ucol3 = img.getPixel(imx3, imy3)" line266="                if (icol &gt; 0) {" line267="                    if (icol == ucol3) {" line268="                        if (mt4[mti2].getPixel(rix2, riy2) &gt; 0) {" line269="                            oimg3.setPixel(imx3, imy3, ocol)" line270="                        } else {" line271="                            oimg3.setPixel(imx3, imy3, ucol3)" line272="                        }" line273="                    }" line274="                } else {" line275="                    if (mt4[mti2].getPixel(rix2, riy2) &gt; 0) {" line276="                        oimg3.setPixel(imx3, imy3, ocol)" line277="                    } else {" line278="                        oimg3.setPixel(imx3, imy3, ucol3)" line279="                    }" line280="                }" line281="            }" line282="        }" line283="        return oimg3" line284="    }" line285="" line286="    //%blockid=img_drawandcrop" line287="    //%block=&quot;stamp $img0=screen_image_picker to $img1 and cutting color with $colorCut at x $xw y $yh&quot;" line288="    //%img1.shadow=variables_get" line289="    //%colorCut.shadow=&quot;lists_create_with&quot; colorCut.defl=colorindexpicker" line290="    //%group=&quot;better image&quot;" line291="    //%inlineInputMode=inline" line292="    //%weight=50" line293="    export function StampCut(img0:Image,img1:Image,colorCut:number[],xw:number,yh:number) {" line294="        if (!img0 || !img1) return;" line295="        for (let x = 0;x &lt; img0.width;x++) {" line296="            for (let y = 0;y &lt; img0.height;y++) {" line297="                const tcolor = img0.getPixel(x,y)" line298="                const fcolor = img1.getPixel(xw+x,yh+y)" line299="                if (tcolor &gt; 0) {" line300="                    if (colorCut.indexOf(fcolor) &gt;= 0) {" line301="                        img1.setPixel(xw+x,yh+y,fcolor)" line302="                    }" line303="                }" line304="            }" line305="        }" line306="    }" line307="" line308="    /**" line309="     * advance image overalap" line310="     * the another image" line311="     * with scanning image" line312="     * to checking overlap the image" line313="     */" line314="    //%blockid=img_imgoverlap" line315="    //%block=&quot;Image $ImgI=screen_image_picker overlaping OtherImage $ImgO=screen_image_picker At OffsetX $Ix OffsetY $Iy And DirX $Dx DirY $Dy&quot;" line316="    //%Dx.min=-1 Dx.max=1 Dx.defl=0" line317="    //%Dy.min=-1 Dy.max=1 Dy.defl=0" line318="    //%group=&quot;better image&quot;" line319="    //%inlineInputMode=inline" line320="    //%weight=0" line321="    export function ImgOverlapImg(ImgI: Image, ImgO: Image, Ix: number, Iy: number, Dx: number, Dy: number) {" line322="        if (ImgI.width &gt; ImgO.height || ImgI.width &gt; ImgO.height) { return false }" line323="        if (Dy == 0 &amp;&amp; Math.abs(Dx) &gt; 0) {" line324="            if (Dx &gt; 0) {" line325="                for (let Nx = 0; Nx &lt; ImgI.width; Nx++) {" line326="                    for (let Ny = 0; Ny &lt; ImgI.height; Ny++) {" line327="                        if (ImgI.getPixel(Nx, Ny) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx, Iy + Ny) &gt; 0) {" line328="                            return true" line329="                        }" line330="                    }" line331="                }" line332="            } else if (Dx &lt; 0) {" line333="                for (let Nx2 = ImgI.width; Nx2 &gt;= 0; Nx2--) {" line334="                    for (let Ny2 = 0; Ny2 &lt; ImgI.height; Ny2++) {" line335="                        if (ImgI.getPixel(Nx2, Ny2) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx2, Iy + Ny2) &gt; 0) {" line336="                            return true" line337="                        }" line338="                    }" line339="                }" line340="            }" line341="        } else if (Dx == 0 &amp;&amp; Math.abs(Dy) &gt; 0) {" line342="            if (Dy &gt; 0) {" line343="                for (let Ny3 = 0; Ny3 &lt; ImgI.height; Ny3++) {" line344="                    for (let Nx3 = 0; Nx3 &lt; ImgI.width; Nx3++) {" line345="                        if (ImgI.getPixel(Nx3, Ny3) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx3, Iy + Ny3) &gt; 0) {" line346="                            return true" line347="                        }" line348="                    }" line349="                }" line350="            } else if (Dy &lt; 0) {" line351="                for (let Ny4 = ImgI.height; Ny4 &gt;= 0; Ny4--) {" line352="                    for (let Nx4 = 0; Nx4 &lt; ImgI.width; Nx4++) {" line353="                        if (ImgI.getPixel(Nx4, Ny4) &gt; 0 &amp;&amp; ImgO.getPixel(Ix + Nx4, Iy + Ny4) &gt; 0) {" line354="                            return true" line355="                        }" line356="                    }" line357="                }" line358="            }" line359="        }" line360="        return false" line361="    }" line362="    " line363="    //%blockid=img_posshadow" line364="    //%block=&quot;x: $x y: $y&quot;" line365="    //%inlineInputMode=inline" line366="    //%group=&quot;main shadow&quot;" line367="    //%weight=10" line368="    export function _posnum(x: number, y: number) {" line369="        let upoint: pos;" line370="        upoint.x = x" line371="        upoint.y = y" line372="        return upoint" line373="    }" line374="" line375="    //%blockid=img_ftimgshadow" line376="    //%block=&quot;stamp $f=screen_image_picker to $t=screen_image_picker&quot;" line377="    //%inlineInputMode=inline" line378="    //%group=&quot;main shadow&quot;" line379="    //%weight=5" line380="    export function _ftimg(f: Image, t: Image) {" line381="        let uftimg: ftimg;" line382="        uftimg.fimg = f" line383="        uftimg.timg = t" line384="        return uftimg" line385="    }" line386="}" numlines="387"></mutation></block></statement></block></xml>